import 'package:flutter/material.dart';
import 'package:foody/buttom_navigator/widget/filter_chip.dart';
import 'package:foody/detail_screen/detail.dart';
import '../model/recipes_model.dart';
import 'widget/card_body.dart';
import '../button_appbar/search_delegate.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';

Future<Autogenerated> fetchMenu() async {
  const String apiUrl =
      'https://api.spoonacular.com/recipes/complexSearch?apiKey=26aa0d4d45a5481a9f34bfdd4a2aee50';
  final response = await http.get(Uri.parse(apiUrl));

  if (response.statusCode == 200) {
    return Autogenerated.fromJson(
        jsonDecode(response.body) as Map<String, dynamic>);
  } else {
    throw Exception('Failed to load Menu');
  }
}

class RecipesPage extends StatefulWidget {
  const RecipesPage({super.key});

  @override
  State<RecipesPage> createState() => _RecipesPageState();
}

class _RecipesPageState extends State<RecipesPage> {
  late Future<Autogenerated> futureAutogenerated;

  List<String> mealTypes = [
    'Main course',
    'Snack',
    'Desert',
    'Appetizer',
    'Drink',
    'Salad',
  ];

  List<String> dietTypes = [
    'Vegan',
    'Vegetarian',
    'Ketogenic',
    'Dairy Free',
    'Gluten Free',
    'Paleo',
    'Facto-Vegetarian'
  ];

  List<String> filters = [
    'ALL',
    'Newest',
    'Top Rated',
    'Most Popular',
    'Trendy',
    'Most Liked',
  ];

  @override
  void initState() {
    super.initState();
    futureAutogenerated = fetchMenu();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          AppLocalizations.of(context)!.recipes,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 20,
          ),
        ),
        actions: <Widget>[
          IconButton(
            onPressed: () {
              showSearch(context: context, delegate: MySearchDelegate());
            },
            icon: const Icon(
              Icons.search,
              size: 24,
            ),
          ),
          IconButton(
            onPressed: () {
              showModalBottomSheet(
                context: context,
                builder: (context) => SizedBox(
                  width: double.infinity,
                  height: 250,
                  child: Padding(
                    padding: const EdgeInsets.all(20),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Row(
                          children: [
                            Icon(
                              Icons.filter_list,
                              size: 24,
                            ),
                            SizedBox(
                              width: 5,
                            ),
                            Text(
                              'Filters',
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                        Wrap(
                          direction: Axis.horizontal,
                          spacing: 5,
                          children: List.generate(
                            6,
                                (index) =>
                                filterChipWidget(chipName: filters[index]),
                          ),
                        ),
                        const SizedBox(
                          height: 10,
                        ),
                        SizedBox(
                          width: double.infinity,
                          height: 50,
                          child: ElevatedButton(
                            onPressed: () {},
                            child: const Text('APPLY'),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              );
            },
            icon: const Icon(
              Icons.filter_list,
              size: 24,
            ),
          ),
        ],
      ),
      body: FutureBuilder<Autogenerated>(
        future: futureAutogenerated,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
          if (snapshot.hasError) {
            return Center(
              child: Text('${snapshot.hasError}'),
            );
          }
          return ListView.builder(
              itemCount: snapshot.data?.results?.length,
              itemBuilder: (context, index) {
                Results results = snapshot.data!.results![index];
                return GestureDetector(
                  onTap: () {
                    Navigator.pushReplacement(
                        context,
                        MaterialPageRoute(
                            builder: (context) =>
                                DetailScreen(id: results.id ?? 0)));
                  },
                  child: CardBody(
                    id: results.id ?? 0,
                    title: results.title ?? '',
                    imageUrl: results.image ?? '',
                  ),
                );
              });
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          showModalBottomSheet(
              context: context,
              builder: (context) => SingleChildScrollView(
                child: SizedBox(
                  width: double.infinity,
                  height: 367,
                  child: Padding(
                    padding: const EdgeInsets.symmetric(
                        vertical: 20, horizontal: 15),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: <Widget>[
                        const Text(
                          'Meal type',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 20,
                          ),
                        ),
                        Wrap(
                          direction: Axis.horizontal,
                          spacing: 5,
                          children: List.generate(
                            6,
                                (index) => filterChipWidget(
                              chipName: mealTypes[index],
                            ),
                          ),
                        ),
                        const SizedBox(
                          height: 10,
                        ),
                        const Text(
                          'Die type',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 20,
                          ),
                        ),
                        Wrap(
                          direction: Axis.horizontal,
                          spacing: 5,
                          children: List.generate(
                            6,
                                (index) => filterChipWidget(
                                chipName: dietTypes[index]),
                          ),
                        ),
                        const SizedBox(
                          height: 10,
                        ),
                        SizedBox(
                          width: double.infinity,
                          height: 50,
                          child: ElevatedButton(
                            onPressed: () {},
                            child: const Text('APPLY'),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ));
        },
        child: const Icon(Icons.restaurant),
      ),
    );
  }
}
